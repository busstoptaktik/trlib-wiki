== KMSTrLib Programming Guide ==

A preliminary guide to programming with KMSTrLib.
See also the section on [[Bindings|bindings to high level languages.]]

=== Exposed functions and constants: ===

See also the [[Release_News|release news page.]]

In the coming release the following functions and constants will be exposed in the API:

{{{
#!c
#define TR_OK                  (0)
#define TR_LABEL_ERROR    (1)
#define TR_ERROR             (2)
#define TR_ALLOCATION_ERROR  (3)

/* Defines for export to foreign srs-metadata */

#define TR_FRMT_EPSG  (0)
#define TR_FRMT_PROJ4 (1)
#define TR_FRMT_ESRI_WKT (2)

#if defined __cplusplus
extern "C" {
#endif

/* Initialisation function which will initialise various global resources.
 * Call with path to geoid library or empty string if TR_TABDIR env variable is set to point to a geoid library.
 * Not thread safe - should be called from 'main' thread before other threads are started
*/
int TR_InitLibrary(char *path);

/* Change the geoid library (and definition files like def_lab.txt) - not thread safe. Should be called from main thread. */
int TR_SetGeoidDir(char *path);

/* Fetch version info. A buffer string of length 128 should suffice. */
void TR_GetVersion(char *buffer, int bufferlength);

/* DEPRECATED - use TR_ExportLabel instead*/
int TR_GetEsriText(char *label_in, char *wkt_out); 

/* Export a mini label to a foreign format defined by a code. Use the predefined macros above. 
 *Be sure to supply a sufficiently large buffer depending on the output format.
* Returns ane of the error codes defined above.
*/	
int TR_ExportLabel(char *mlb, char *out, int foreign_format_code, int buf_len);

/* Import a mini label from a foreign format (the ones defined in the macros above). 
* Will 'autodetect' the format.
* For EPSG definitions prepend the definition with "EPSG:" e.g. "EPSG:25832" 
* Returns ane of the error codes defined above.
*/
int TR_ImportLabel(char *text, char *mlb_out, int buf_len);
 
/* Terminate the library and free various resources.*/
void TR_TerminateLibrary(void);
 
/*Call to free thread local resources, when a thread performing transformations is not used anymore / destroyed. */
void TR_TerminateThread(void);

/* Call this function to allow transformations which are not thread safe */
void TR_AllowUnsafeTransformations(void);

/* Call this function to disallow transformations which are not thread safe - this is the DEFAULT behaviour */
void TR_ForbidUnsafeTransformations(void);

/* Typedef for transformation objects - basically a container for pointers to input and output projections. Any of these can be NULL. 
*  The object is only valid for use in a transformation if both input and output projections are set.
*/
typedef struct  TR_kms_str TR;

/* Print info on last used geoid to stdout. 
* WARNING: this implementation will change in the future or the function will be deprecated.
*/
void TR_GeoidInfo(TR *tr);

/* Get the scale (c) and meridian convergence (m) of a projection. 
 * If the flag is_proj_out is 0 / False, the input projection in the TR object is used, else the output projection is used. 
 * Returns ane of the error codes defined above.
 */
int TR_GetLocalGeometry(TR *tr, double x, double y, double *m, double *c, int is_proj_out);

/* Open a transformation object specified by minilabels label_in and label_out.
 *  If any of the labels are NULL or "" the corresponding 'slot' is left unused (NULL).
 *  The last parameter geoid_name should typically be left as NULL or "", but can be used to select a special geoid defined in the geoid library. 
 *  If geoid_name is "" or NULL trlib will automatically select the geoid according to the scheme defined in manager.tab.
 *  Returns NULL if an error was encountered - fetch error with TR_GetLastError.
 */
TR  *TR_Open (char *label_in, char *label_out, char *geoid_name);
 
/* Insert a projection into the TR object at the slot defined by the is_out flag.
 * If the slot is occupid (not NULL) the previous projection will be replaced.
 * Enables 'reuse' of TR objects.
 * Returns ane of the error codes defined above.
 */
 int  TR_Insert (TR *tr, char *mlb, int is_out);
  
/* Perform a transformation on arrays of doubles.
The last int parameter specifies array length.  Z can be NULL, in which case a 0 will be inserted for z in the transformation.
 'Copies in place'/overwrites input.
 * Returns ane of the error codes defined above.
*/
int   TR_Transform(TR *tr, double *X, double *Y, double *Z, int n);

/* As above - but the inverse transformation. */
int   TR_InverseTransform(TR *tr, double *X, double *Y, double *Z, int n);

/* Perform a transformation on arrays of doubles.
The last int parameter specifies array length.  Z can be NULL, in which case a 0 will be inserted for z in the transformation.
 Writes output to the specified output pointers.
 * Returns ane of the error codes defined above.
*/
 int   TR_Transform2(TR *tr, double *X_in, double *Y_in, double *Z_in, double *X_out, double *Y_out, double *Z_out, int n);
 
 /* As above - but the inverse transformation. */
 int   TR_InverseTransform2(TR *tr, double *X_in, double *Y_in, double *Z_in, double *X_out, double *Y_out, double *Z_out, int n);
 
 /* Perform a transformation on a single input point.
 Writes output to the specified output pointers.
 * Returns ane of the error codes defined above.
*/
int   TR_TransformPoint(TR *tr, double X_in, double Y_in, double Z_in, double *X_out, double *Y_out, double *Z_out);

 /* As above - but the inverse transformation. */
int   TR_InverseTransformPoint(TR *tr, double X_in, double Y_in, double Z_in, double *X_out, double *Y_out, double *Z_out);

/* Close a TR object. 
* MUST be called before the object goes out of scope in order to avoid memory leaks!
*/
void TR_Close (TR *tr);

/* Transform points defined in input stream f_in and write output to f_out.
* Assumes a simple format where coordinates are white space separated.
* The last int parameter can be used to set a maximum number of points to transform.
* Use 0 to not set any maximum (and ignore errors/garbage) and -1 to return if errors/garbage is encountered. 
* Returns ane of the error codes defined above.
*/
int   TR_Stream(TR *tr, FILE *f_in, FILE *f_out, int n);

/************************************************************************
*       LORD (LOgging Reporting and Debugging)  module functions                 *
*************************************************************************/
/* Class code to distinguish 'report' type in call_back*/
typedef enum 
{LORD_DEBUG=0, 
LORD_INFO=1, 
LORD_WARNING=2,
LORD_ERROR=3,
LORD_CRITICAL=4} LORD_CLASS;

/* Definition of call back  function type - second argument is the error code (only valid for error messages)*/
typedef void( *LORD_CALLBACK )(LORD_CLASS, int , const char *);


/*Return last buffered  *thread local * error code from the lord module */
 int TR_GetLastError(void);

/* LORD module setter functions below.
* These are NOT thread safe and should only be used from the main thread (which called TR_InitLibrary)
*/

/* Set the maximal number of messages that should be logged.
 * Use a negative number if you do not want to set any maximum, i.e. not stop logging at all */
 void TR_SetLordMaxMessages (int max_messages);

/* Sets the lord call back function  - call with NULL to remove callback functionality*/
 void TR_SetLordCallBack(LORD_CALLBACK fct);

/* Turn the lord modes on or off 
* e.g. after calling TR_SetLordModes(0,0,1,1,1); only error messages and warnings will be handled (default behaviour).
*/
 void TR_SetLordModes(int debug, int info, int warning, int error, int critical);

/* Set the output pointers for each lord_type 
* The user 'owns' the file pointers and is responsible for closing these. 
* Do NOT close a FILE pointer which is still in use in the LORD module - should be set to NULL before a call to fclose.
* Should generally not be mixed with calls to TR_SetLordFile
* Default behaviour is to print to stdout / stderr - USE this function to override.
*/
 void TR_SetLordOutputs(FILE * stream_debug_outside, FILE * stream_info_outside, FILE * stream_warning_outside, FILE * stream_error_outside, FILE * stream_critical_outside);

/* Set the verbosity levels (1,2,3) for the modes */
 void TR_SetLordVerbosityLevels(int verb_debug, int verb_info, int verb_warning);

/* Sets the lord output file for ALL reporting types. 
* Will close previously associated streams - thus the LORD module will take 'ownership' over the file pointers.
*  Should generally not be mixed with calls to TR_SetLordOutputs
* Returns ane of the error codes defined above.
*/
 int TR_SetLordFile(char *fullfilename);

#if defined __cplusplus
}
#endif

}}}


====**Additions:**====

Newly added functions:

* **TR_ImportLabel**:

Imports a mini label from a foreign srs metadata description like e.g. EPSG code, (ESRI) wkt or Proj4 syntax. Example:
{{{
#!c
ok=TR_ImportLabel("EPSG:4326",mlb);
}}}  
should copy "geo_wgs84" into mlb. Returns TR_OK on success.

* **TR_ExportLabel**:

Exports a mini label into a foreign metadata format. For example
{{{
#!c
ok=TR_ExportLabel("geo_wgs84",text,TR_FRMT_PROJ4,512);
}}}
should copy "+proj=latlong +datum=WGS84" to text. Will return TR_OK on success.

* **TR_Insert**:
Inserts a projection into a transformation object TR, at either the sys_in=0 or the sys_out=1 slot. Allows for reuse of TR-objects. Example:

{{{
#!c
ok=TR_Insert(trf,"geo_wgs84",1);
}}}
will set the output projection of the transformation trf to "geo_wgs84". Returns TR_OK on succes.

* **TR_GetLocalGeometry**:

Gets scale and meridian convergence of a projection contained in a TR-object. Example:
{{{
#!c
ok= TR_GetLocalGeometry(trf, x, y, &m, &c, 1);
}}}
will copy the meridian convergence and scale of the output projection of trf to the doubles m and c. 
Only supports ITM, UTM, LMB and STG projections - thus **NOT** system34 (1,0 will be returned in this case).

* **LORD (LOgging, Reporting and Debugging) module functions**:

A range of functions to capture error, debug and info messages from trlib have been added to the API. Refer to  the documentation in the API header above.


====**Deprecated:**====

* **TR_GetEsriText** is deprecated, use **TR_ExportLabel** instead. 


===Environment Variables:===

* **TR_TABDIR:** Can be used to point to a relevant folder containing definition files and/or geoids distributed by KMS.

=== Units: ===

Note that coordinates in geographical systems "geo_xxx" are expected to be in **radians**. In the python bindings, **only**, a conversion from radians to degrees has been implemented, so that here the expected unit is degrees!

=== Definition files and geoid library: ===

The definition file def_lab.txt is needed in order to perform any transformations. The definition files are parsed in TR_InitLibrary, so you'll need to call this with a path to where the files are located or set the TR_TABDIR variable before the call.

The path can be changed later with TR_SetGeoidDir(path). The location pointed to does not need to include any geoid files as long as def_lab.txt is present in the folder. 

If the user wants to perform 3d-transformations, involving e.g. various height systems, a proper geoid library distributed by KMS on releases should be pointed to by InitLibrary. However it is possible to do 2d-transformations (and some 3d-transformations involving ellipsoidal heights) without any geoid library, as long as def_lab.txt can be located.

===Possible setups:===
Below "def-files" refer to the two necessary definition files def_lab.txt and def_shp.txt.

|=**Location of def-files**|=**Possible transformations**|=**Call to TR_InitLibrary**|
|In geoid folder,\\pointed to by TR_TABDIR|2d and 3d     | TR_InitLibrary(“”)|
|In geoid folder| 2d and 3d         |TR_InitLibrary(path_to_folder)|
|In some folder without any geoids | 2d |TR_InitLibrary(path_to_folder)|

===Thread Safety===

We have implemented thread safety by using thread local storage. After the library has been initialised by **TR_InitLibrary** in some thread, each new thread created can perform transformations as usual. **TR_TerminateThread** **must** be called by the thread before it exits. 
TR-objects returned by TR_Open contain thread local data, and should not be shared among threads.

Due to a special implementation of Fehmarn transformations (defined by minilabel fcs), these are not fully thread safe and should be run by a single threaded process. The transformations can only be run after a call to **TR_AllowUnsafeTransformations**.

A snippet, which would allow a Fehmarn-transformation:
{{{
#!c
 TR *trf;
 int err;
 double x,y,z;
 TR_AllowUnsafeTransformations();
 trf=TR_Open("utm32Eed50","fcsH_h_fcsvr10","");
 err=TR_TransformPoint(trf,845200.1,6145200.1,100.0,&x,&y,&z);
 TR_Close(trf);
}}}


===Simple examples:===

The following example illustrates a simple usage of the library where TR_TABDIR points to a valid geoid folder containing definition files.
{{{
#!c
#include <stdio.h>
#include "trlib_api.h"
int main(void) {
    int is_init,err;
    double x[2]={512200.1,845200.1};
    double y[2]={6143200.0,6099200.2};
    double z[2]={20.0,30.0};
    char ver[128];
    TR *trf;
    TR_GetVersion(ver,128);
    printf("TrLib version %s\n",ver);
    is_init=(TR_InitLibrary("")==TR_OK);
    if (!is_init)
        exit(FAILURE);
    trf=TR_Open("utm32Ewgs84","utm33Eed50","");
    err=TR_Transform(trf,x,y,z,2);
    TR_Close(trf);
    TR_TerminateLibrary();
    return err;
}
}}}
Another example: minitrans.c

Transform data from file argv[3], write to file argv[4]. Input  data reference system is described by minilabel in argv[1], output data reference system is described by minilabel in argv[2].
{{{
#!c
#include <stdio.h>
#include "trlib_api.h"

int main (int argc, char *argv[]) {
    TR *tr;
    FILE *in, *out;
    int err;
    TR_InitLibrary("");
    tr  = TR_Open (argv[1], argv[2],"");
    in  = fopen (argv[3], "rt");
    out = fopen (argv[4], "wt");
    err = TR_Stream (tr, in, out, 0);
    fclose (out);
    fclose (in);
    TR_Close (tr);
    TR_TerminateLibrary();
    return err;
}

}}}

Using some of the wrappers of the transformation procedure, we could also do:

{{{
#!c

int err;
double x,y,z;
TR trf=TR_Open("utm32Eed50","crt_wgs84","");
err=TR_TransformPoint(trf,512200.1,6143200.1,100.0,&x,&y,&z);
/* test if we can get back again? */
err=TR_InverseTransformPoint(trf,x,y,z,&x,&y,&z);

}}}

An example with arrays:
{{{
#!c
int foo(double *x, double *y, double *x_o, double *y_o, int n){
    int err;
    TR trf=TR_Open("geo_wgs84","utm22_gr96","");
    err=TR_Transform2(trf,x,y,NULL,x_o,y_o,NULL,n);
    if (err!=TR_OK)
          printf("Oops, this is the extended error code: %d\n",TR_GetLastError());
    else
          /* can we get back? */
          err=TR_InverseTransform2(trf,x_o,y_o,NULL,x,y,NULL,n);
    return err;
}
}}}

===Maximising performance:===

Since resources are allocated each time a new transformation object is opened with TR_Open, it is generally a good idea to keep the TR-objects around as long as they are needed.

Also resources are allocated each time a new thread is attached to the library. This implies, that it is also a good strategy to keep threads alive for as long as they are needed.

Another implementation detail is that the library performs some internal initialisation each time the transformation procedure is called with a new transformation– which means that it can also boost performance to do several transformations in a thread using the same TR-object, rather than calling with different TR-objects in a random order. In real use cases, transformation requests can of course come in in a random order. This is however a minor detail, which should be negligible in most cases.

=== Return Codes ===

The return codes from API functions are defined in trlib_api.h. 

* TR_OK=0 , means that all is OK.
* TR_LABEL_ERROR=1 , means that an erroneous minilabel was given as input.
* TR_ERROR=2 , means that some error happened during transformation.
* TR_ALLOCATION_ERROR=3, means that some resource could not be opened/allocated.

More detailed return error codes, if something went wrong during a transformation, can be fetched with TR_GetLastError. See [[error codes|error codes]].

=== Comparison to the earlier KMSTrLib API ===
In the previous c++ API a transformation could be performed like this:
{{{
#!c
enum KMSTR_Error e;
double X,Y,Z;
e = KMSTR_Transform("utm32Hwgs84_h_dvr90","utm33Ewgs84",512200.1,6143200.1,0,&X,&Y,&Z);
}}}

In the new API, this can be done by:
{{{
#!c
int e;
TR *trf=TR_Open("utm32Hwgs84_h_dvr90","utm33Ewgs84","");
double X=512200.1,Y=6143200.1,Z=0;
e= TR_Transform(trf,&X,&Y,&Z,1);
if (e!=TR_OK)
    printf("Error, return code was: %d, extended error msg: %d\n",e,TR_GetLastError());

}}}

The projection defined in trf can then be reused before it is finally closed with TR_Close.

In the previous API this would be:

{{{
#!c
enum KMSTR_Error e;
int e2;
double X,Y,Z;
HKMSTR c1=KMSTR_CreateProjectionHandle("utm32Hwgs84_h_dvr90");
HKMSTR c2=KMSTR_CreateProjectionHandle("utm33Ewgs84");
e=KMSTR_TransformViaHandle(c1,c2,512200.1,6143200.1,0,&X,&Y,&Z,&e2);
}}}
Where the "projections" c1,c2 should be closed with KMSTR_ReleaseProjectionHandle, when they are not used anymore.


A major difference between the two APIs is that the transformation functions can be called with //arrays//. In particular in a multithreaded setup this can mean a major performance boost. In the old API threads where synchronised by mutex mechanisms and were thus effectively running serially. This is not the case in the new API, where thread local storage is used. As a result, the new way of handling thread safety should be significantly faster on a multicore machine. 

 