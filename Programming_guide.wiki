== KMSTrLib Programming Guide ==

A preliminary guide to programming with KMSTrLib.
See also the section on [[Bindings|bindings to high level languages.]]

=== Exposed functions: ===
Note that the set of exposed functions has changed since RC0!

* **int TR_InitLibrary(char *path):**

Sets tabdir/geoid folder to input string and initialises various global resources. If the input string is empty, the function will look for input from environment variable TR_TABDIR. If the user wants to perform 3d-transformations the directory pointed to here should be a valid geoid library distributed by KMS. 

Returns 1 on success, 0 otherwise, so that the "truth value" directly indicates succes or failure. Note that this differs from the general convention for the API functions. 

This function is *not* thread safe and should be called by the main thread, before other threads start doing transformations. 

* **void TR_GetVersion(char *buffer, int bufferlength):**  Writes version info to buffer. 
* **int TR_GetLastError(void):** Returns extended error code.

* **int TR_GetEsriText(char *label_in, char *wkt_out):** 
Translates minilabel to ESRI-flavoured wkt. Requires file def_shp.txt in current working directory or tabdir defined in TR_InitLibrary. Works for most common minilabels.

* **void TR_TerminateLibrary(void):** Frees various global resources. Should be called when library is shut down.

* **void TR_TerminateThread(void):** 
Frees various thread local resources. Should be called before exit of each thread, apart from the main thread, attached to the library.

* **TR *TR_Open (char *label_in, char *label_out, char *geoid_name):** 
Opens a transformation object – TR is an internally defined struct, which contains data relevant to a transformation between systems defined by label_in and label_out. A special geoid can be specified as third parameter – if this is given as the empty string, a standard geoid, if available, is selected by the library.

* **void TR_GeoidInfo(TR *tr):** Not yet fully operational. Prints info about current selected geoid to stdout. This behaviour will be improved in later releases, or the function will be deprecated.

* **int TR_Transform(TR *tr, double *X, double *Y, double *Z, int n):** 
Perform a transformation defined in the TR-object. Input are pointers to coordinates. Here the pointer Z can be NULL. The last parameter specifies the number of points pointed to by the input. Previously called tr!

* **void TR_Close (TR *tr):**  Close a TR-object, frees the resources allocated in the object.
* **int TR_Stream(TR *tr, FILE *f_in, FILE *f_out, int n):** Transform points from/to file objects. Previously called trclose!

* The wrapper of TR_Open, TR_Transform and TR_Close previously called TR_Transform, has been deprecated! 

New functions:

* ** void TR_AllowUnsafeTransformations(void):** If running in single threaded mode, allow transformations which are NOT thread safe. These are disabled by default.
* ** void TR_ForbidUnsafeTransformations(void):** Allows only thread safe transformations. This feature is enabled by default!

* **int TR_InverseTransform(TR *tr, double *X, double *Y, double *Z, int n):** Perform inverse of transformation defined in TR-object tr.

===Environment Variables:===
* **TR_TABDIR:** Can be used to point to a relevant folder containing definition files and/or geoids distributed by KMS.

=== Definition files and geoid library: ===

The definition file def_lab.txt is needed in order to perform any transformations. The library will, as default, look for def_lab.txt in the current directory (where a program is invoked). If def_lab.txt is not found there, knowing that the concept of “current directory” is not always well defined, the KMSTrLib will look for the definition file in the tabdir defined in TR_InitLibrary. The same procedure holds for other definition/parameter files. For example the file def_shp.txt is needed by the function TR_GetEsriText.
If the user wants to perform 3d-transformations, involving e.g. various height systems, a proper geoid library distributed by KMS on releases should be pointed to by InitLibrary. However it is possible to do 2d-transformations without any geoid library, as long as def_lab.txt can be located.

===Possible setups:===

* Location of def_lab.txt , def_shp.txt,Possible transformations,Call to TR_InitLibrary
*In geoid folder pointed to by TR_TABDIR, 2d and 3d, TR_InitLibrary(“”)
*In geoid folder, 2d and 3d, TR_InitLibrary(path_to_folder)
*In “current directory”, 2d, TR_InitLibrary(“”)
*In some folder. No geoids in that folder or in “current directory”, 2d,TR_InitLibrary(path_to_folder)

===Thread Safety===

We have implemented thread safety by using thread local storage. After the library has been initialised by TR_InitLibrary in some thread, each new thread created can perform transformations as usual. TR_TerminateThread **must** be called by the thread before it exits. 
TR-objects returned by tropen contain thread local data, and should not be shared among threads.

Due to a special implementation of Fehmarn transformations (defined by minilabel fcs), these are not fully thread safe and should be run by a single threaded process. The transformations can only be run after a call to **TR_AllowUnsafeTransformations**.


===Simple examples:===

The following example illustrates a simple usage of the library where TR_TABDIR points to a valid geoid folder containing definition files.
{{{
#!c
#include <stdio.h>
#include "trlib_api.h"
int main(void) {
    int is_init,err;
    double x[2]={512200.1,845200.1};
    double y[2]={6143200.0,6099200.2};
    double z[2]={20.0,30.0};
    char ver[128];
    TR *trf;
    TR_GetVersion(ver,128);
    printf("TrLib version %s\n",ver);
    is_init=TR_InitLibrary("");
    if (!is_init)
        exit(FAILURE);
    trf=TR_Open("utm32Ewgs84","utm33Eed50","");
    err=TR_Transform(trf,x,y,z,2);
    TR_Close(trf);
    TR_TerminateLibrary();
    return err;
}
}}}
Another example: minitrans.c

Transform data from file argv[3], write to file argv[4]. Input  data reference system is described by minilabel in argv[1], output data reference system is described by minilabel in argv[2].
{{{
#!c
#include <stdio.h>
#include "trlib.h"

int main (int argc, char *argv[]) {
    TR *tr;
    FILE *in, *out;
    int err;
    TR_InitLibrary("");
    tr  = TR_Oopen (argv[1], argv[2],"");
    in  = fopen (argv[3], "rt");
    out = fopen (argv[4], "wt");
    err = TR_Stream (tr, in, out, 0);
    fclose (out);
    fclose (in);
    TR_Close (tr);
    TR_TerminateLibrary();
    return err;
}

}}}

===Maximising performance:===

Since resources are allocated each time a new transformation object is opened with tropen, it is generally a good idea to keep the TR-objects around as long as they are needed. The simple wrapper TR_Transform opens and closes a new TR-object on each call. However, the performance difference should be negligible unless you are doing a lot of the same transformations right after each other.

Also resources are allocated each time a new thread is attached to the library. This implies, that it is also a good strategy to keep threads alive for as long as they are needed.

Another implementation detail is that the library performs some internal initialisation each time the transformation procedure is called with a new transformation– which means that it can also boost performance to do several transformations in a thread using the same TR-object, rather than calling with different TR-objects in a random order. In real use cases, transformation requests can of course come in in a random order. This is however a minor detail, which should be negligible in most cases.

=== Return Codes ===

The return codes from API functions are defined in trlib_api.h. Apart from **TR_InitLibrary** they follow the convention:

* TR_OK=0 , means that all is OK.
* TR_LABEL_ERROR=1 , means that an erroneous minilabel was given as input.
* TR_ERROR=2 , means that some error happened during transformation.
* TR_ALLOCATION_ERROR=3, means that some resource could not be opened/allocated.

More detailed return error codes, if something went wrong during a transformation, can be fetched with TR_GetLastError. See [[error codes|error codes]].

=== Comparison to the earlier KMSTrLib API ===
In the previous c++ API a transformation could be performed like this:
{{{
#!c
enum KMSTR_Error e;
double X,Y,Z;
e = KMSTR_Transform("utm32Hwgs84_h_dvr90","utm33Ewgs84",512200.1,6143200.1,0,&X,&Y,&Z);
}}}

In the new API, this can be done by:
{{{
#!c
int e;
TR *trf=TR_Open("utm32Hwgs84_h_dvr90","utm33Ewgs84","");
double X=512200.1,Y=6143200.1,Z=0;
e= TR_Transform(trf,&X,&Y,&Z,1);
if (e!=TR_OK)
    printf("Error, return code was: %d, extended error msg: %d\n",e,TR_GetLastError());

}}}

The projection defined in trf can then be reused before it is finally closed with trclose.

In the previous API this would be:

{{{
#!c
enum KMSTR_Error e;
int e2;
double X,Y,Z;
HKMSTR c1=KMSTR_CreateProjectionHandle("utm32Hwgs84_h_dvr90");
HKMSTR c2=KMSTR_CreateProjectionHandle("utm33Ewgs84");
e=KMSTR_TransformViaHandle(c1,c2,512200.1,6143200.1,0,&X,&Y,&Z,&e2);
}}}
Where the "projections" c1,c2 should be closed with KMSTR_ReleaseProjectionHandle, when they are not used anymore.


A major difference between the two APIs is that the transformation functions can be called with //arrays//. In particular in a multithreaded setup this can mean a major performance boost. In the old API threads where synchronised by mutex mechanisms and were thus effectively running serially. This is not the case in the new API, where thread local storage is used. As a result, the new way of handling thread safety should be significantly faster on a multicore machine. 

 
